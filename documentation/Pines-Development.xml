<?xml version="1.0" encoding="UTF-8"?>
<book version="5.0" xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <title>Pines Development</title>

    <author>
      <personname><firstname>Hunter</firstname><surname>Perrin</surname></personname>

      <affiliation>
        <orgname>SciActive</orgname>
      </affiliation>
    </author>

    <copyright>
      <year>2011</year>

      <holder>Hunter Perrin. All rights reserved.</holder>
    </copyright>
  </info>

  <preface>
    <title>Preface</title>

    <para></para>

    <section>
      <title>How This Book is Organized</title>

      <para>This book is divided into three parts, each dealing with a
      different aspect of Pines development. Each part builds on the
      information and instruction given in the previous part.</para>

      <section>
        <title>Part I: The Pines Framework</title>

        <para>Part I focuses on getting acquainted with the Pines framework.
        It provides information about Pines, how it works, and what is
        provided by Pines. I discuss how to get Pines from the development
        repositories. Pines Core, the system on which the framework is built,
        is discussed in depth. System services, which provide additional
        functionality for developers, are explained in detail.</para>
      </section>

      <section>
        <title>Part II: Application Development</title>

        <para></para>
      </section>

      <section>
        <title>Part III: Distribution</title>

        <para></para>
      </section>
    </section>

    <section>
      <title>Conventions Used in This Book</title>

      <para></para>
    </section>
  </preface>

  <part>
    <title>The Pines Framework</title>

    <chapter>
      <title>Pines</title>

      <section>
        <title>What is Pines?</title>

        <para>Pines is a MVC based PHP framework, designed to help produce
        complex web applications rapidly. It is a full featured application
        framework, which provides features not only unique to Pines as a
        framework, but never before seen in PHP before. Pines is designed with
        the developer in mind. This is reflected in the history of
        Pines.</para>

        <para>Pines' goal as a framework is to provide the developer with a
        set of tools, which simplify the development of complex applications
        and allow administrators to easily and quickly set up complex, secure
        installations. One of the key aspects considered in Pines development
        is customization. Pines has a long history of being customized for all
        sorts of use, and that history has brought Pines some important tools.
        The SciActive maintained configurator component, com_configure, is a
        perfect example of Pines' obsession with customization, allowing the
        administrator to provide different configuration based on users,
        groups, and even dependency sets.</para>

        <para>Pines strives to also provide this level of customization to its
        developers. Many of the features available in Pines are provided
        through system services, which can be implemented in many different
        ways. For example, the entity manager, used to provide data storage
        and retrieval, can use any number of different backends. Because Pines
        defines a standard way of interacting with these system services,
        developers can design their components once, and have it work with any
        implementation of these system services. Developers can also extend
        components to add features not available by default. For example, the
        official user manager adds access control features to the entity
        manager, which by default, has no considerations for users or groups.
        Amazingly, this extension to the entity manager is accomplished
        without altering any of its code. The user manager uses method hooking
        to alter the functionality of the entity manager. This level of
        flexibility allows developers to create complex, scalable applications
        with ease.</para>
      </section>

      <section>
        <title>The History of Pines</title>

        <para>Pines was started in the Fall of 2008 by myself, Hunter Perrin.
        While taking my first PHP class, along with a French I class, I
        developed a small PHP application to allow the collaborative editing
        of a play script. The application was used for my French class, then
        stowed away. Several months after that, I started a new job, working
        as a web designer. There, they requested me to find an application
        capable of sending newsletters to their clients. I dug up the old
        application, and adapted it to send emails. This incarnation was
        called Dandelion, and released under the GNU Affero GPL.</para>

        <para>After a year there, I took a new position. They had several new
        ideas for web applications, which I slowly started building using
        Dandelion. When the project started to really resemble a framework,
        not just an application, we renamed it to Pines. Problem after problem
        would arise, and solution after solution would be built. All atop the
        Pines framework. Every feature in Pines has come from the real need of
        a business environment. Pines has seen many redesigns, and it barely
        resembles the early application.</para>

        <para>Now Pines is a solid, well tested, and well documented
        framework, suitable for building high demand enterprise
        applications.</para>
      </section>

      <section>
        <title>Implications of Pines' License, The GNU AGPL</title>

        <para>Pines is, and always will be, free and open source software.
        This means that anyone can freely redistribute Pines, obtain the
        source code for study or modification, and create derived works (under
        the same license). It is released under the GNU AGPL, which places
        certain requirements on use of Pines software.</para>

        <para>If you modify any of Pines' source code (including the SciActive
        maintained components), and use this modified code to run a server,
        which users can access, your modified code must be freely available to
        these users. This does not mean that you must release any custom
        components you create, just any modifications to Pines' core or
        official components.</para>

        <para>You are free to make modifications and not release them to the
        public, but any users which access the system on which the modified
        code runs must have access to the code.</para>

        <para>If you would like to change Pines' behavior without modifying
        its code, you can use the hook system to accomplish almost any needed
        change. Because a component can be licensed under any license, you do
        not necessarily have to distribute this source code.</para>
      </section>

      <section>
        <title>Features That Make Pines Unique</title>

        <para>Pines has many features which are either vastly superior to
        their counterparts in other frameworks, or have never been seen before
        in PHP. This is a list of just a few features that make Pines stand
        out in the ever expanding field of PHP frameworks.<itemizedlist>
            <listitem>
              <para>The Package Manager</para>

              <para>The package manager resembles the package managers common
              in Linux. It handles dependencies, retrieves updates, checks
              signed code, and much more. This isn't necessarily uncommon in a
              PHP framework, but Pines' package manager is 100% PHP code. That
              includes everything. The package downloading, dependency
              checker, code signing, even the package format is 100%
              PHP.</para>
            </listitem>

            <listitem>
              <para>The Slim Archive Format</para>

              <para>The Slim archive format is the heart of the package
              manager. Using just PHP, Slim is able to rival other archive
              formats. Slim archives can even be built to self extract.</para>
            </listitem>

            <listitem>
              <para>The Hook System</para>

              <para>Similar hook systems have been attempted by other
              frameworks, but Pines' hook system is unparalleled. It allows
              the developer to extend or even change <phrase
              role="bold">any</phrase> method in a component. This level of
              flexibility allows developers to collaborate and build like
              never before.</para>
            </listitem>

            <listitem>
              <para>The Entity Manager</para>

              <para>The entity manager is an object-relational mapper, which
              provides developers with a very simple and very flexible way of
              saving, retrieving, and manipulating data. With a simple, yet
              powerful querying system, you can make a complex, portable
              application without ever writing a single SQL query. Complex
              data relations are easy to handle and easy to query.</para>
            </listitem>
          </itemizedlist></para>

        <para>Pines is full of features which make coding applications fast
        and easy, yet it's flexible enough to fit almost any application.
        Let's get started!</para>
      </section>
    </chapter>

    <chapter>
      <title>Getting Started</title>

      <section>
        <title>Setting Up an Environment</title>

        <para>The first and most important thing you need to develop for Pines
        is a web server. Pines is designed for Apache on Linux, but it will
        work fine on most setups. If you are planning on using the entity
        manager, which is the easiest way to store and manipulate data in
        Pines, you will also most likely need a database server. MySQL works
        well with Pines, and is officially supported by SciActive. I recommend
        using an IDE, such as NetBeans or Eclipse. Both have great PHP
        support. Once you have Pines set up and you are ready to make your own
        components/templates, you can use symlinks to test them with different
        Pines setups.</para>
      </section>

      <section>
        <title>Getting Pines</title>

        <para>There are several sites which host Pines, and Pines related
        software.<itemizedlist>
            <listitem>
              <para><link
              xlink:href="http://sourceforge.net/projects/pines/">http://sourceforge.net/projects/pines/</link></para>

              <para>The Pines project page on SourceForge. This is where
              almost everything about Pines can be found.</para>
            </listitem>

            <listitem>
              <para><link
              xlink:href="http://pines.sourceforge.net/">http://pines.sourceforge.net/</link></para>

              <para>Pines' main website.</para>
            </listitem>

            <listitem>
              <para><link
              xlink:href="http://pines.sourceforge.net/pines-docs/">http://pines.sourceforge.net/pines-docs/</link></para>

              <para>Pines API Documentation. This can be very helpful to have
              handy while you are learning Pines development. Before using
              Pines' advanced features, I recommend reading through the
              related API documentation to ensure you have a firm
              understanding of how Pines' features work and how to use
              them.</para>
            </listitem>

            <listitem>
              <para><link
              xlink:href="http://www.sciactive.com/">http://www.sciactive.com/</link></para>

              <para>Pines' main developer's website.</para>
            </listitem>

            <listitem>
              <para><link
              xlink:href="http://www.pinesplaza.com/">http://www.pinesplaza.com/</link></para>

              <para>The official Pines Repository. Pines components and
              templates are hosted and distributed here. You can get a free
              account and distribute your software through Pines Plaza.</para>
            </listitem>
          </itemizedlist></para>

        <para>Pines, and its related projects are available in Mercurial
        repositories from SourceForge.<itemizedlist>
            <listitem>
              <para><link
              xlink:href="http://pines.hg.sourceforge.net:8000/hgroot/pines/pines">http://pines.hg.sourceforge.net:8000/hgroot/pines/pines</link><emphasis>
              or </emphasis><link
              xlink:href="http://pines.hg.sourceforge.net:8000/hgroot/pines/core">http://pines.hg.sourceforge.net:8000/hgroot/pines/core</link></para>

              <para>Pines Core repository. Contains the core system
              files.</para>
            </listitem>

            <listitem>
              <para><link
              xlink:href="http://pines.hg.sourceforge.net:8000/hgroot/pines/components">http://pines.hg.sourceforge.net:8000/hgroot/pines/components</link></para>

              <para>Pines Components repository. Contains official components
              and templates.</para>
            </listitem>

            <listitem>
              <para><link
              xlink:href="http://pines.hg.sourceforge.net:8000/hgroot/pines/pform">http://pines.hg.sourceforge.net:8000/hgroot/pines/pform</link></para>

              <para>Pines Form.</para>
            </listitem>

            <listitem>
              <para><link
              xlink:href="http://pines.hg.sourceforge.net:8000/hgroot/pines/pgrid">http://pines.hg.sourceforge.net:8000/hgroot/pines/pgrid</link></para>

              <para>Pines Grid.</para>
            </listitem>

            <listitem>
              <para><link
              xlink:href="http://pines.hg.sourceforge.net:8000/hgroot/pines/pnotify">http://pines.hg.sourceforge.net:8000/hgroot/pines/pnotify</link></para>

              <para>Pines Notify.</para>
            </listitem>

            <listitem>
              <para><link
              xlink:href="http://pines.hg.sourceforge.net:8000/hgroot/pines/ptags">http://pines.hg.sourceforge.net:8000/hgroot/pines/ptags</link></para>

              <para>Pines Tags.</para>
            </listitem>

            <listitem>
              <para><link
              xlink:href="http://pines.hg.sourceforge.net:8000/hgroot/pines/tools">http://pines.hg.sourceforge.net:8000/hgroot/pines/tools</link></para>

              <para>Build tools, documentation, logo sources, and other
              various tools.</para>
            </listitem>

            <listitem>
              <para><link
              xlink:href="http://pines.hg.sourceforge.net:8000/hgroot/pines/cash-drawer">http://pines.hg.sourceforge.net:8000/hgroot/pines/cash-drawer</link></para>

              <para>Pines POS Cash Drawer Firefox Extension</para>
            </listitem>
          </itemizedlist></para>

        <para>To get a local copy of Pines for testing or development, clone
        the Mercurial repositories.</para>

        <para><programlisting language="sh">mkdir pines
hg clone http://pines.hg.sourceforge.net:8000/hgroot/pines/pines pines

mkdir components
hg clone http://pines.hg.sourceforge.net:8000/hgroot/pines/components components</programlisting></para>

        <para>Then create links to the components/templates under the correct
        directories.</para>

        <para><programlisting language="sh">cd pines/components/
ln -s ../../components/com_* ./

cd ../templates/
ln -s ../../components/tpl_* ./</programlisting></para>

        <para>You will need to unlink conflicting components, such as extra
        entity managers. If you plan to use MySQL for example, you will need
        to delete the links to com_pgentity and com_pgsql.</para>

        <para><programlisting language="sh">cd pines/components/
unlink com_pgentity
unlink com_pgsql</programlisting></para>

        <para>To update your local repository and get the latest code, pull
        changes and update.<programlisting language="sh">cd pines/
hg pull
hg up

cd ../components/
hg pull
hg up</programlisting></para>

        <para>I recommend using a Mercurial GUI to make using the repository
        easier. I use TortoiseHG (http://tortoisehg.org/).</para>
      </section>

      <section>
        <title>Coding Style</title>

        <note>
          <para>This coding style is the style used by Pines Core and the
          SciActive maintained components/templates. If you are submitting a
          patch, please keep it written in this style. In your own
          components/templates you are free to use whatever style you like,
          but you must conform to the naming guidelines.</para>
        </note>

        <section>
          <title>Indentation</title>

          <para>Indentation is done with one tab character. The examples in
          this book use four space characters, simply because the program used
          to write it does not allow tabs. Cases in a switch are indented.
          Arguments of a function call are indented once, with the exception
          of entity manager queries, which should be indented twice. This is
          in order to accurately and quickly find and understand entity
          manager queries in a function. In each selector of an entity manager
          query, the selector type should be placed on the line with the
          opening "array(".<example>
              <title>Indentation</title>

              <programlisting language="php">if ($var) {
    // Something
}

if ($var)
    do_something();

switch ($var) {
    case 'barbecue':
        echo 'what?';
        break;
    case 'something':
    default:
        echo 'that\'s normal';
        break;
}

// Typical function call.
$pines-&gt;something(
    $arg1,
    $arg2
);

// Entity manager query.
$pines-&gt;entity_manager-&gt;get_entities(
        array('class' =&gt; entity),
        array('&amp;',
            'tag' =&gt; array('some', 'tags')
        ),
        array('!&amp;',
            'data' =&gt; array('something', true)
        )
    );</programlisting>
            </example></para>
        </section>

        <section>
          <title>Brackets and Parentheses</title>

          <para>Opening brackets are placed on the same line. Closing brackets
          are placed on a new line. If you break parentheses, indent the
          contained lines. The while in a do while loop is placed on the same
          line as the closing bracket. In PHP, one line if and else blocks can
          either use brackets or not. In JavaScript (in order to reduce file
          size) brackets are not recommended in this case.</para>

          <para><example>
              <title>Brackets and Parentheses</title>

              <programlisting language="php">if ($var) {
    one_thing();
    another_thing();
}

if ($var)
    one_thing();

// This is fine.
if ($var)
    one_thing();
else
    another_thing();
// Also fine.
if ($var) {
    one_thing();
} else {
    another_thing();
}

if ($var) {
    one_thing();
    another_thing();
} elseif ($othervar) {
    // Something else
} else {
    // Something different
}

function something($arg1, $arg2 = null) {
    // Something
}

if (
        $athing &amp;&amp;
        $anotherthing &amp;&amp;
        (
            $thisthing ||
            $thatthing
        )
    )
    do_something();</programlisting>
            </example></para>
        </section>

        <section>
          <title>Naming</title>

          <para>Names in Pines always use lowercase, and words are separated
          by underscores.</para>

          <para>Component names start with "com_" and don't contain any
          underscores after that. Component names can only contain letters,
          numbers, and the underscore. A component's class shares its name
          with the component. Other than a few special classes, like
          <classname>user</classname> and <classname>entity</classname>, that
          are provided by services, classes are prefixed with their
          component's name. E.g.
          <classname>com_example_widget</classname>.</para>

          <para>Templates are the same, except "tpl_" is used instead of
          "com_".</para>

          <para>Action names only contain letters, numbers, and underscores.
          Actions which the user sees (i.e. Not JSON only actions) do not
          contain underscores.</para>

          <para>View names can contain any valid filename character, but try
          to only use letters, numbers, underscores, and dashes.</para>

          <para>Entity tags cannot contain commas. The only tag that begins
          with "com_" should be the name of the component that uses it.</para>

          <para>Components' functions should be prefixed with their
          component's name, followed by two underscores, then the name. E.g.
          <function>com_example__do_something()</function>. This is only for
          functions, not for methods.</para>
        </section>

        <section>
          <title>Commenting</title>

          <para>Pines uses both C89 (/*...*/) and C99 (//...) style comments.
          Comments should have a space after the comment mark. Code which is
          commented out should not. C89 style is preferred for longer
          comments.<example>
              <title>Comments</title>

              <programlisting language="php">// This is a short comment.

/*
 * This is a long comment which is
 * too long to fit on one line, so
 * it's been commented using C89
 * style comments.
 */

// However if it's not too long,
// then this is also acceptable.

// Don't use a leading space when commenting out code.
//$pines-&gt;com_example-&gt;something();</programlisting>
            </example></para>

          <para>Pines uses phpDocumentor (http://www.phpdoc.org) to generate
          API documentation. Files, functions, classes, interfaces,
          properties, methods, constants, and requires/includes that are part
          of Pines Core or SciActive's components should be commented using
          phpDoc style comment blocks using the package "Pines". Each
          component and template is a subpackage of "Pines".</para>
        </section>
      </section>

      <section>
        <title>Building Pines</title>

        <para>To build a custom release of Pines, you will need to clone the
        "tools" repository. There, you will find the
        <filename>build-tools/buildrelease.php</filename> file. Point your
        browser to this script to use the release builder. The directory you
        enter should be in the directory above the "tools" repository
        clone.</para>

        <para>In the build tools, you will also find scripts to package Pines'
        jQuery plugins and to generate an icon component's CSS.</para>
      </section>
    </chapter>

    <chapter>
      <title>Pines Core</title>

      <section>
        <title>Structure</title>

        <section>
          <title>File Structure</title>

          <para>Pines has a strict and logical file structure. The system and
          individual components have a similar file structure. Some less
          important files and folders have been left out of the following list
          for brevity.<itemizedlist>
              <listitem>
                <para><filename>components</filename> - Contains all currently
                installed components.</para>
              </listitem>

              <listitem>
                <para><filename>media</filename> - Contains uploaded and
                installed media files.<itemizedlist>
                    <listitem>
                      <para><filename>images</filename> - Contains uploaded
                      images.</para>
                    </listitem>

                    <listitem>
                      <para><filename>logos</filename> - Contains logos,
                      including Pines' default logo.</para>
                    </listitem>
                  </itemizedlist></para>
              </listitem>

              <listitem>
                <para><filename>system</filename> - Contains the Pines Core
                code.<itemizedlist>
                    <listitem>
                      <para><filename>actions</filename> - Contains actions
                      always available in Pines.</para>
                    </listitem>

                    <listitem>
                      <para><filename>classes</filename> - Contains the core
                      classes used by Pines.</para>
                    </listitem>

                    <listitem>
                      <para><filename>includes</filename> - Contains Pines
                      JavaScript files.</para>
                    </listitem>

                    <listitem>
                      <para><filename>init</filename> - Contains the system
                      init scripts which build the Pines environment and
                      control execution of scripts.</para>
                    </listitem>

                    <listitem>
                      <para><filename>views</filename> - Contains views used
                      by Pines Core.</para>
                    </listitem>

                    <listitem>
                      <para><filename>defaults.php</filename> - The default
                      configuration settings for Pines Core.</para>
                    </listitem>

                    <listitem>
                      <para><filename>i01common.php</filename> - An init
                      script which is run with the component init scripts. It
                      sets up several shortcut functions and other useful
                      functions.</para>
                    </listitem>

                    <listitem>
                      <para><filename>info.php</filename> - The Pines Core
                      information file. Contains information such as version
                      number and core abilities.</para>
                    </listitem>

                    <listitem>
                      <para><filename>menu.json</filename> - The main menu
                      file. This sets up the main menu and its
                      submenus.</para>
                    </listitem>

                    <listitem>
                      <para><filename>offline.php</filename> - The file used
                      to build the offline page.</para>
                    </listitem>

                    <listitem>
                      <para><filename>template_error.php</filename> - The file
                      used to inform of an error with the currently selected
                      template.</para>
                    </listitem>
                  </itemizedlist></para>
              </listitem>

              <listitem>
                <para><filename>templates</filename> - Contains all currently
                installed templates.</para>
              </listitem>

              <listitem>
                <para><filename>index.php</filename> - The main controller
                script. This sets up some constants, then immediately executes
                the system init scripts.</para>
              </listitem>
            </itemizedlist></para>
        </section>

        <section>
          <title>Object Structure</title>

          <para>Pines is structured almost entirely around the Pines object,
          <varname>$pines</varname>. The variable is created in the global
          scope by the system init script,
          <filename>i30load_system.php</filename>. To use the variable in any
          function or method, declare it using the <keysym>global</keysym>
          keyword.</para>

          <para><example>
              <title>Using <varname>$pines</varname> in a function or
              method.</title>

              <programlisting language="php">function example() {
    global $pines;
    $pines-&gt;something();
}</programlisting>
            </example></para>

          <para>Several core services are loaded as variables of
          <varname>$pines</varname>. See the <link
          linkend="core_services">Core Services</link> section for an
          explanation of these services.<itemizedlist>
              <listitem>
                <para><varname>$pines-&gt;info</varname></para>
              </listitem>

              <listitem>
                <para><varname>$pines-&gt;config</varname></para>
              </listitem>

              <listitem>
                <para><varname>$pines-&gt;hook</varname></para>
              </listitem>

              <listitem>
                <para><varname>$pines-&gt;depend</varname></para>
              </listitem>

              <listitem>
                <para><varname>$pines-&gt;menu</varname></para>
              </listitem>

              <listitem>
                <para><varname>$pines-&gt;page</varname></para>
              </listitem>
            </itemizedlist></para>

          <para><varname>$pines</varname> also contains some useful
          variables.<itemizedlist>
              <listitem>
                <para><varname>$pines-&gt;components</varname></para>

                <para>An array of the enabled components.</para>
              </listitem>

              <listitem>
                <para><varname>$pines-&gt;all_components</varname></para>

                <para>An array of all installed components.</para>
              </listitem>

              <listitem>
                <para><varname>$pines-&gt;services</varname></para>

                <para>An array of the provided system services.</para>
              </listitem>

              <listitem>
                <para><varname>$pines-&gt;request_component</varname></para>

                <para>The requested component. This is passed as the request
                variable "option".</para>
              </listitem>

              <listitem>
                <para><varname>$pines-&gt;request_action</varname></para>

                <para>The requested action. This is passed as the request
                variable "action".</para>
              </listitem>

              <listitem>
                <para><varname>$pines-&gt;component</varname></para>

                <para>The currently running or most recently called
                component/option.</para>
              </listitem>

              <listitem>
                <para><varname>$pines-&gt;action</varname></para>

                <para>The currently running or most recently called
                action.</para>
              </listitem>
            </itemizedlist></para>

          <para>The following variables are not loaded until after the
          component init scripts are run.<itemizedlist>
              <listitem>
                <para><varname>$pines-&gt;current_template</varname></para>

                <para>The name of the current template.</para>
              </listitem>

              <listitem>
                <para><varname>$pines-&gt;template</varname></para>

                <para>The current template object.</para>
              </listitem>
            </itemizedlist></para>
        </section>
      </section>

      <section>
        <title>Pines Object</title>

        <para>As well as containing services and variables, the Pines object
        (<varname>$pines</varname>) also includes several useful
        methods.</para>

        <section>
          <title>Running an Action</title>

          <para>To run an action, use the <methodname>action</methodname>
          method. Actions are run automatically when requested in the URL by
          the client. The "option" request variable determines the component
          to which the action belongs, and the "action" request variable
          determines which action to run. The action is run by the system init
          script <filename>i60action.php</filename>.</para>

          <para>Sometimes, actions need to be run manually in code. For
          example, the default action (<filename>default.php</filename> in a
          component's <filename>action</filename> directory) can be used to
          direct the user to a common action by calling
          <methodname>action</methodname>.</para>

          <para>When an action is run, <methodname>action</methodname> will
          look in the component's <filename>action</filename> directory for a
          file with the same name as the desired action (with .php appended).
          If the desired component is "system", Pines will instead look in the
          system's <filename>action</filename> directory. If no action was
          specified, <methodname>action</methodname> will look for a
          <filename>default.php</filename> file. If no component was
          specified, <methodname>action</methodname> will use the default
          component specified in Pines' configuration. Once the correct file
          is found, <methodname>action</methodname> will run the file. The
          <varname>$pines</varname> variable is already included when the file
          is run, so there is no need to include it with the
          <keysym>global</keysym> keyword.<note>
              <para>Since actions are run inside a function, they are not in
              the global scope. This means actions don't have to clean up
              variables and need not worry about naming collisions.</para>
            </note></para>

          <para>If no action file was found for the given arguments,
          <methodname>action</methodname> will return the string "error_404".
          Otherwise, it will return the value returned by the action file. If
          <filename>i60action.php</filename> receives "error_404" when it runs
          the requested action, it will attach a module with the system's
          "error_404" view into the page's "content" position and send a 404
          HTTP status code. This means your action can return the string
          "error_404" if the requested information is not found and a 404
          error will be sent to the client.<example>
              <title>Manually Running an Action</title>

              <programlisting language="php">// Run a specific action.
$pines-&gt;action('com_example', 'widgets/list');

// Run a component's default action.
$pines-&gt;action('com_example');

// Run the default component's default action.
$pines-&gt;action();</programlisting>
            </example></para>
        </section>

        <section>
          <title>Checking an IP Address</title>

          <para>There are three methods of checking whether an IP address is
          on a given network in the Pines object.</para>

          <simplesect>
            <title>Using CIDR Notation</title>

            <para>You can use <methodname>check_ip_cidr</methodname> to check
            an IP address using the CIDR notation of a network.<example>
                <title>Checking an IP Using CIDR Notation</title>

                <programlisting language="php">$good = $pines-&gt;check_ip_cidr('192.168.0.5', '192.168/24'); // Returns true.

$bad = $pines-&gt;check_ip_cidr('192.168.1.5', '192.168/24'); // Returns false.</programlisting>
              </example></para>
          </simplesect>

          <simplesect>
            <title>Using an IP Range</title>

            <para>You can use <methodname>check_ip_range</methodname> to check
            an IP address using an IP range.<example>
                <title>Checking an IP Using an IP Range</title>

                <programlisting language="php">$good = $pines-&gt;check_ip_range('192.168.0.5', '192.168.0.0', '192.168.0.255'); // Returns true.

$bad = $pines-&gt;check_ip_range('192.168.1.5', '192.168.0.0', '192.168.0.255'); // Returns false.</programlisting>
              </example></para>
          </simplesect>

          <simplesect>
            <title>Using a Subnet Mask</title>

            <para>You can use <methodname>check_ip_subnet</methodname> to
            check an IP address using the subnet mask of a network.<example>
                <title>Checking an IP Using a Subnet Mask</title>

                <programlisting language="php">$good = $pines-&gt;check_ip_subnet('192.168.0.5', '192.168.0.0', '255.255.255.0'); // Returns true.

$bad = $pines-&gt;check_ip_subnet('192.168.1.5', '192.168.0.0', '255.255.255.0'); // Returns false.</programlisting>
              </example></para>
          </simplesect>
        </section>

        <section>
          <title>Formatting Output</title>

          <para>There are several types of content that need to be formatted
          correctly before being output to the user. The Pines object provides
          functions to allow easy formatting of this data.</para>

          <section>
            <title>Formatting Content</title>

            <para>To format content, use
            <methodname>format_content</methodname>. By itself,
            <methodname>format_content</methodname> does nothing. Its purpose
            is to provide a way for components to alter content before it is
            shown to the client. By using this method to format your
            component's content before outputting it, you allow other
            components to use the hooking system to provide special
            alterations to your content. This is meant to provide things like
            string replacements, inline modules, HTML cleansers, etc. This
            does not mean you should always run content through this method.
            Certain types of content, such as page text, blog post text,
            product descriptions, etc are appropriate for content formatting.
            However, content such as user comments, forum posts, etc may allow
            an unprivileged user to use dangerous services if run through the
            formatter. A good idea may be to use a configuration option to
            allow certain content to be altered by other components. Generally
            only user provided content should ever be formatted. Content like
            your component's forms should most likely never be
            formatted.<example>
                <title>Formatting Content for Output</title>

                <programlisting language="php">&lt;div&gt;
    &lt;?php echo $pines-&gt;format_content($post-&gt;content); ?&gt;
&lt;/div&gt;</programlisting>
              </example></para>

            <para>As mentioned, components can hook this function to provide
            special alterations to content. See the <link
            linkend="hook">Hook</link> section in <link
            linkend="core_services">Core Services</link> for information about
            hooks.<example>
                <title>Using a Hook to Alter Content</title>

                <programlisting language="php">// Replace the word "Pines" with "Barbecue".
function com_example__replace(&amp;$arguments) {
    $arguments[0] = str_replace('Pines', 'Barbecue', $arguments[0]);
}

$pines-&gt;hook-&gt;add_callback('$pines-&gt;format_content', -10, 'com_example__replace');</programlisting>
              </example></para>
          </section>

          <section>
            <title>Formatting a Date / Time</title>

            <para>To format a date or time using a timestamp, use
            <methodname>format_date</methodname>. The current user's timezone
            is automatically loaded by the user manager and used for
            calculations. You can also pass
            <methodname>format_date</methodname> a timezone to use. When using
            a custom format, any format recognized by the
            <methodname>format</methodname> method of the
            <classname>DateTime</classname> class can be used.
            <methodname>format_date</methodname> supports several format
            types.<table>
                <title>Date Format Types</title>

                <tgroup cols="3">
                  <colspec colnum="2" colwidth="2*" />

                  <colspec colnum="3" colwidth="4*" />

                  <thead>
                    <row>
                      <entry>Type</entry>

                      <entry>Format Code</entry>

                      <entry>Description</entry>
                    </row>
                  </thead>

                  <tbody>
                    <row>
                      <entry>full_sort</entry>

                      <entry><code>Y-m-d H:i T</code></entry>

                      <entry>Date and time, big endian and 24 hour format so
                      it is sortable.</entry>
                    </row>

                    <row>
                      <entry>full_long</entry>

                      <entry><code>l, F j, Y g:i A T</code></entry>

                      <entry>Date and time, long format.</entry>
                    </row>

                    <row>
                      <entry>full_med</entry>

                      <entry><code>j M Y g:i A T</code></entry>

                      <entry>Date and time, medium format.</entry>
                    </row>

                    <row>
                      <entry>full_short</entry>

                      <entry><code>n/d/Y g:i A T</code></entry>

                      <entry>Date and time, short format.</entry>
                    </row>

                    <row>
                      <entry>date_sort</entry>

                      <entry><code>Y-m-d</code></entry>

                      <entry>Only the date, big endian so it is
                      sortable.</entry>
                    </row>

                    <row>
                      <entry>date_long</entry>

                      <entry><code>l, F j, Y</code></entry>

                      <entry>Only the date, long format.</entry>
                    </row>

                    <row>
                      <entry>date_med</entry>

                      <entry><code>j M Y</code></entry>

                      <entry>Only the date, medium format.</entry>
                    </row>

                    <row>
                      <entry>date_short</entry>

                      <entry><code>n/d/Y</code></entry>

                      <entry>Only the date, short format.</entry>
                    </row>

                    <row>
                      <entry>time_sort</entry>

                      <entry><code>H:i T</code></entry>

                      <entry>Only the time, 24 hour format so it is
                      sortable.</entry>
                    </row>

                    <row>
                      <entry>time_long</entry>

                      <entry><code>g:i:s A T</code></entry>

                      <entry>Only the time, long format.</entry>
                    </row>

                    <row>
                      <entry>time_med</entry>

                      <entry><code>g:i:s A</code></entry>

                      <entry>Only the time, medium format.</entry>
                    </row>

                    <row>
                      <entry>time_short</entry>

                      <entry><code>g:i A</code></entry>

                      <entry>Only the time, short format.</entry>
                    </row>

                    <row>
                      <entry>custom</entry>

                      <entry>(Contents of <varname>$format</varname>)</entry>

                      <entry>Use whatever is passed in
                      <varname>$format</varname>.</entry>
                    </row>
                  </tbody>
                </tgroup>
              </table><example>
                <title>Formatting a Date</title>

                <programlisting language="php">&lt;div&gt;
    &lt;?php echo $pines-&gt;format_date($timestamp, 'custom', 'l jS \of F Y h:i:s A', 'America/Los_Angeles'); ?&gt;
&lt;/div&gt;</programlisting>
              </example></para>
          </section>

          <section>
            <title>Formatting a Phone Number</title>

            <para>To format a phone number, use
            <methodname>format_phone</methodname>. It uses US phone number
            format. E.g. "(800) 555-1234 x56".<example>
                <title>Formatting a Phone Number</title>

                <programlisting language="php">&lt;div&gt;
    &lt;?php echo $pines-&gt;format_phone('1800555123456'); ?&gt;
&lt;/div&gt;</programlisting>
              </example></para>
          </section>
        </section>

        <section>
          <title>Redirecting the User</title>

          <para>The Pines object includes <methodname>redirect</methodname>, a
          method to redirect users to a different URL. Using this method
          ensures that any messages and errors that are queued to be displayed
          to the user will be displayed when the user reaches the destination
          URL, assuming that URL is also handled by the same Pines
          installation. The HTTP status code returned to the client can be
          changed and defaults to 303 See Other.<example>
              <title>Redirecting the User</title>

              <programlisting language="php">// Notices and errors will be saved.
pines_notice('You have been redirected here.');
$pines-&gt;redirect(pines_url('com_example', 'widgets/list'));

// Redirect to the homepage.
$pines-&gt;redirect(pines_url());

// Use a permanent redirection code.
$pines-&gt;redirect(pines_url('com_example', 'widgets/list'), 301);</programlisting>
            </example></para>
        </section>
      </section>

      <section xml:id="core_services">
        <title>Core Services</title>

        <section>
          <title>Config (<classname>config</classname> class)</title>

          <para>The config service loads configuration for both Pines and any
          components/templates. The configuration for Pines is always loaded,
          and components' configuration is loaded the first time it is
          accessed during each script run. Config will start by loading the
          <filename>defaults.php</filename> file (if it exists) in the
          component's directory. The return value from this file is an array
          which is used to load configuration variables. Each array entry
          should be an associative array containing the following
          entries:<table>
              <title>Config Array Entries</title>

              <tgroup cols="3">
                <colspec colnum="3" colwidth="5*" />

                <thead>
                  <row>
                    <entry>Key</entry>

                    <entry>Required</entry>

                    <entry>Description</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry>name</entry>

                    <entry>Yes</entry>

                    <entry>The configuration option's name. This is used to
                    access it from code.</entry>
                  </row>

                  <row>
                    <entry>cname</entry>

                    <entry>Yes</entry>

                    <entry>A canonical name. This is displayed to the user
                    when setting the option.</entry>
                  </row>

                  <row>
                    <entry>description</entry>

                    <entry>Yes</entry>

                    <entry>A description of the configuration option.</entry>
                  </row>

                  <row>
                    <entry>value</entry>

                    <entry>Yes</entry>

                    <entry>The default value of the configuration
                    option.</entry>
                  </row>

                  <row>
                    <entry>options</entry>

                    <entry>No</entry>

                    <entry>An array of the possible values of the
                    option.</entry>
                  </row>

                  <row>
                    <entry>peruser</entry>

                    <entry>No</entry>

                    <entry>A boolean determining whether the option can be set
                    on a per user basis.</entry>
                  </row>
                </tbody>
              </tgroup>
            </table></para>

          <para><tip>
              <para>Calling a function in a <filename>defaults.php</filename>
              file will use extra resources when the configuration variable
              for the component is first accessed on each request, even if the
              configuration has been set to a non-default value. To speed up
              your component, avoid calling functions in
              <filename>defaults.php</filename>.</para>
            </tip></para>

          <para>Config will then load the <filename>config.php</filename> file
          (if it exists) in the component's directory. This file is generated
          by the configurator service and stores user specified configuration.
          The file is structured the same, except that each entry only
          contains "name" and "value".</para>

          <para>The configuration is built using these files, and placed into
          an object named after the component on the first attempted access of
          the object. Pines' configuration options are placed in the config
          object itself.<example>
              <title>Accessing Configuration for Pines and Components</title>

              <programlisting language="php">// Access Pines' "system_name" configuration option:
echo $pines-&gt;config-&gt;system_name;

// Access a component's "website_name" configuration option:
echo $pines-&gt;config-&gt;com_example-&gt;website_name;

// Access a template's "tagline" configuration option:
echo $pines-&gt;config-&gt;tpl_green-&gt;tagline;</programlisting>
            </example></para>

          <caution>
            <para>Configuration options are not cleaned or checked (except
            when an options array is used). When you are inserting them into
            HTML, they should be escaped with
            <function>htmlspecialchars()</function>.</para>
          </caution>
        </section>

        <section>
          <title>Depend (<classname>depend</classname> class)</title>

          <para>The depend service manages and runs dependency checkers. It
          includes several dependency checkers by default.<table>
              <title>Built In Dependency Checkers</title>

              <tgroup cols="2">
                <colspec colnum="2" colwidth="5*" />

                <thead>
                  <row>
                    <entry>Name</entry>

                    <entry>Description</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry>ability</entry>

                    <entry>Check that the current user has certain
                    abilities.</entry>
                  </row>

                  <row>
                    <entry>action</entry>

                    <entry>Check the currently running or originally requested
                    action.</entry>
                  </row>

                  <row>
                    <entry>class</entry>

                    <entry>Check whether classes exist.</entry>
                  </row>

                  <row>
                    <entry>clientip</entry>

                    <entry>Check the client's IP address.</entry>
                  </row>

                  <row>
                    <entry>component</entry>

                    <entry>Check whether components/templates are installed,
                    enabled, and are certain versions.</entry>
                  </row>

                  <row>
                    <entry>function</entry>

                    <entry>Check whether functions exist.</entry>
                  </row>

                  <row>
                    <entry>host</entry>

                    <entry>Check the requested server hostname. Uses the
                    hostname provided by the client in the HTTP
                    request.</entry>
                  </row>

                  <row>
                    <entry>option</entry>

                    <entry>Check the currently running or originally requested
                    component.</entry>
                  </row>

                  <row>
                    <entry>php</entry>

                    <entry>Check PHP's version.</entry>
                  </row>

                  <row>
                    <entry>pines</entry>

                    <entry>Check Pine's version.</entry>
                  </row>

                  <row>
                    <entry>service</entry>

                    <entry>Check the available system services.</entry>
                  </row>
                </tbody>
              </tgroup>
            </table></para>

          <para>To check a dependency, use the
          <methodname>check()</methodname> method. It will return true if the
          value passes the check, or false if it does not.<example>
              <title>Using the Dependency Checker</title>

              <programlisting language="php">if (!$pines-&gt;depend-&gt;check('component', 'com_example&gt;=2.0|com_sample')) {
    pines_notice('This feature is only available when you have com_example 2.0 or greater, or com_sample.');
    return;
}</programlisting>
            </example></para>

          <para>Adding a new dependency checker is easy. Add a new entry to
          the checkers variable, using the name of the checker as the key, and
          a callback to the checker function as the value. The callback
          function should return true if the check passes and false if it does
          not. This should usually be done using an init script. That will
          ensure the checker is available by the time an action is
          run.<example>
              <title>Adding a New Checker</title>

              <programlisting language="php">function com_example__check_something($value) {
    return ($value == 'barbecue');
}

$pines-&gt;depend-&gt;checkers['something'] = 'com_example__check_something';

// Call the new checker like this:
// $pines-&gt;depend-&gt;check('something', 'a value'); // Would return false.</programlisting>
            </example></para>

          <caution>
            <para>Since unprivileged users are often allowed to run custom
            dependency checkers, it is important to not allow disclosure of
            sensitive data using a checker. For example, an unprotected file
            checker could be used to find files on the host machine.</para>
          </caution>

          <caution>
            <para>Be careful that a checker does not recursively call itself,
            which could result in an infinite loop.</para>
          </caution>

          <para>All the built in dependency checkers use
          <methodname>simple_parse()</methodname> to understand simple logic.
          The syntax is simple, including and "&amp;", or "|", not "!", and
          grouping using parentheses "()". Here's an example of how to use
          <function>simple_parse()</function> in the example checker.<example>
              <title>Using the Simple Parser</title>

              <programlisting language="php">function com_example__check_something($value) {
    global $pines;
    if (
            strpos($value, '&amp;') !== false ||
            strpos($value, '|') !== false ||
            strpos($value, '!') !== false ||
            strpos($value, '(') !== false ||
            strpos($value, ')') !== false
        )
        return $pines-&gt;depend-&gt;simple_parse($value, 'com_example__check_something');
    return ($value == 'barbecue');
}

$pines-&gt;depend-&gt;checkers['something'] = 'com_example__check_something';

// Call the new checker like this:
// $pines-&gt;depend-&gt;check('something', 'a value|barbecue'); // Would return true.</programlisting>
            </example></para>

          <para>If you'd like to include your checker in your component's
          class, it is better to consider the resources used by including a
          callback directly to your component's method. Component classes are
          loaded as soon as the object is first accessed. Instead of using a
          callback to the method, you can use a shortcut function to save
          Pines from loading your component's class during each script
          run.<example>
              <title>Using a Shortcut Function to a Method</title>

              <programlisting language="php">// Using an extra function to call the real checker keeps the com_example
// class from being loaded on each script run.
function com_example__check_something($value) {
    global $pines;
    return $pines-&gt;com_example-&gt;something($value);
}

$pines-&gt;depend-&gt;checkers['something'] = 'com_example__check_something';</programlisting>
            </example></para>

          <note>
            <para>Many things use the dependency checker, including menu
            entries, the package manager, conditional groups, and conditional
            configuration just to name a few.</para>
          </note>
        </section>

        <section xml:id="hook">
          <title>Hook (<classname>hook</classname> class)</title>

          <para>The hook service provides method hooking for the entire
          <varname>$pines</varname> object and most classes. Method hooking
          allows a developer to intercept function calls and alter arguments,
          alter return values, and change the actual function being
          called.</para>

          <simplesect>
            <title>How Hook Works</title>

            <para>Hook uses a complex technique to override an object and
            allow all its public methods to be hooked. When
            <methodname>hook_object()</methodname> is called and passed an
            object, it begins by using PHP's reflection API to analyze the
            object and build a new object. The class used to build the new
            object is the <classname>hook_override__NAMEHERE_</classname>
            class. Hook will create a new class based on this class by
            replacing "_NAMEHERE_" with the name of the class. Each method on
            the original object is recreated in the new class. The replacement
            methods, when called will run the callbacks associated with that
            hook and the original method on the original object. Once the new
            class is complete, it is loaded, and an object is created using
            it. The new object stores the original object, and replaces the
            variable holding that object. The new object now resides in place
            of the original object.</para>

            <para>When a variable is requested from the object, the new object
            will pass the request directly to the original object. When the
            object is requested as a string, invoked, or cloned it will also
            request it from the original object. When the object is cloned, it
            will hook the clone as well.</para>

            <caution>
              <para>Calls from within a method of the original class to
              another method of the class will not be intercepted. This
              includes all calls to private methods. Static methods cannot be
              hooked either.</para>
            </caution>

            <caution>
              <para>Functions which return or check the class name of the
              object will use the class name of the new object, and could
              therefore return unwanted results. For example, a hooked user
              object would return false with <code>is_a($user, 'user')</code>.
              You can check for the class
              <classname>hook_override_user</classname> or check
              <classname>hook_override</classname> just to see if it is
              hooked.</para>
            </caution>
          </simplesect>

          <simplesect>
            <title>How to Use Hooks</title>

            <para>To hook an object, so calls to its methods can be
            intercepted, use <methodname>hook_object()</methodname>. The
            prefix will be used when setting up callbacks for the
            hooks.<example>
                <title>Hooking an Object</title>

                <programlisting language="php">$widget = new com_example_widget;
$pines-&gt;hook-&gt;hook_object($widget, 'com_example_widget-&gt;', false);</programlisting>
              </example></para>

            <note>
              <para><varname>$pines</varname>, along with all objects within
              it (except the hook, depend, config, and info services) are
              automatically hooked. Most components are designed to
              automatically hook their classes using the
              <methodname>factory()</methodname> static method.</para>
            </note>

            <para>To set up a callback, use
            <methodname>add_callback()</methodname>. A callback is called
            either before a method runs or after. The callback is passed an
            array of arguments or return value which it can freely manipulate.
            If the callback runs before the method and sets the arguments
            array to false (or causes an error), the method will not be run.
            Callbacks before a method are passed the arguments given when the
            method was called, while callbacks after a method are passed the
            return value (in an array) of that method.</para>

            <para>The callback can receive up to 5 arguments, in this
            order:<orderedlist>
                <listitem>
                  <para><varname>&amp;$arguments</varname></para>

                  <para>An array of either arguments or a return value.</para>
                </listitem>

                <listitem>
                  <para><varname>$name</varname></para>

                  <para>The name of the hook.</para>
                </listitem>

                <listitem>
                  <para><varname>&amp;$object</varname></para>

                  <para>The object on which the hook caught a method
                  call.</para>
                </listitem>

                <listitem>
                  <para><varname>&amp;$function</varname></para>

                  <para>A callback for the method call which was caught.
                  Altering this will cause a different function/method to
                  run.</para>
                </listitem>

                <listitem>
                  <para><varname>&amp;$data</varname></para>

                  <para>An array in which callbacks can store data to
                  communicate with later callbacks.</para>
                </listitem>
              </orderedlist></para>

            <para>A hook is the name of whatever method it should catch. A
            hook can also have an arbitrary name, but be wary that it may
            already exist and it may result in your callback being falsely
            called. In order to reduce the chance of this, always use a plus
            sign (+) and your component's name to begin arbitrary hook names.
            E.g. "+com_games_player_bonus".</para>

            <para>If the hook is called explicitly, callbacks defined to run
            before the hook will run immediately followed by callbacks defined
            to run after.</para>

            <para>A negative <varname>$order</varname> value means the
            callback will be run before the method, while a positive value
            means it will be run after. The smaller the order number, the
            sooner the callback will be run. You can think of the order value
            as a timeline of callbacks, zero (0) being the actual method being
            hooked.</para>

            <para>Additional identical callbacks can be added in order to have
            a callback called multiple times for one hook.</para>

            <para>The hook "all" is a pseudo hook which will run regardless of
            what was actually caught. Callbacks attached to the "all" hook
            will run before callbacks attached to the actual hook.<example>
                <title>Adding a Callback to a Hook</title>

                <programlisting language="php">function com_example__callback() {
    // Do something.
}

// Run the callback before something() is called on com_example.
// Note the single quotes. Double quotes would be parsed by PHP and not work.
$pines-&gt;hook-&gt;add_callback('$pines-&gt;com_example-&gt;something', -10, 'com_example__callback');

// Run the callback before delete() is called on com_example_widget.
$pines-&gt;hook-&gt;add_callback('com_example_widget-&gt;delete', -1, 'com_example__callback');

// Run the callback after every method call is caught.
$pines-&gt;hook-&gt;add_callback('all', 10, 'com_example__callback');</programlisting>
              </example></para>

            <para>To manually run callbacks (without an originating function
            call), use <methodname>run_callbacks()</methodname>.<example>
                <title>Manually Run Callbacks</title>

                <programlisting language="php">$pines-&gt;hook-&gt;run_callbacks('+com_games_player_bonus');</programlisting>
              </example></para>
          </simplesect>
        </section>

        <section>
          <title>Info (<classname>info</classname> class)</title>

          <para>The info service provides information about Pines and
          installed components/templates. When Info is loaded, the
          <filename>info.php</filename> file in the
          <filename>system</filename> folder is retrieved. This file is used
          to fill variables in the info object. Similarly, when a component's
          variable is accessed, Info will look for an info.php file in the
          component's directory. It will use this file to create an object for
          that component. The <varname>template</varname> variable will
          contain the info of the current template. The info file should
          return an associative array with the following entries:<table>
              <title>Info Array Entries</title>

              <tgroup cols="3">
                <colspec colnum="3" colwidth="5*" />

                <thead>
                  <row>
                    <entry>Key</entry>

                    <entry>Required</entry>

                    <entry>Description</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry>name</entry>

                    <entry>Yes</entry>

                    <entry>The component's name. This is the name displayed to
                    the user.</entry>
                  </row>

                  <row>
                    <entry>author</entry>

                    <entry>Yes</entry>

                    <entry>The component's author.</entry>
                  </row>

                  <row>
                    <entry>version</entry>

                    <entry>Yes</entry>

                    <entry>The component's version.</entry>
                  </row>

                  <row>
                    <entry>license</entry>

                    <entry>No</entry>

                    <entry>The URL or name of the license under which the
                    component is released.</entry>
                  </row>

                  <row>
                    <entry>website</entry>

                    <entry>No</entry>

                    <entry>The URL of the component's website.</entry>
                  </row>

                  <row>
                    <entry>services</entry>

                    <entry>No</entry>

                    <entry>An array of the names of services the component
                    provides.</entry>
                  </row>

                  <row>
                    <entry>short_description</entry>

                    <entry>No</entry>

                    <entry>A short description of the component.</entry>
                  </row>

                  <row>
                    <entry>description</entry>

                    <entry>No</entry>

                    <entry>A description of the component.</entry>
                  </row>

                  <row>
                    <entry>depend</entry>

                    <entry>No</entry>

                    <entry>An associative array of dependencies which the
                    component requires. The keys are the names of the
                    dependency checker to use.</entry>
                  </row>

                  <row>
                    <entry>conflict</entry>

                    <entry>No</entry>

                    <entry>An associative array of dependencies which the
                    component conflicts with. The keys are the names of the
                    dependency checker to use.</entry>
                  </row>

                  <row>
                    <entry>recommend</entry>

                    <entry>No</entry>

                    <entry>An associative array of dependencies which the
                    component recommends. The keys are the names of the
                    dependency checker to use.</entry>
                  </row>

                  <row>
                    <entry>abilities</entry>

                    <entry>No</entry>

                    <entry>An array of abilities used by the component. Each
                    array has three entries, a name, a title, and a
                    description, in that order.</entry>
                  </row>
                </tbody>
              </tgroup>
            </table><example>
              <title>Example Info File</title>

              <programlisting language="php">defined('P_RUN') or die('Direct access prohibited');

return array(
    'name' =&gt; 'System Configurator',
    'author' =&gt; 'SciActive',
    'version' =&gt; '1.0.0',
    'license' =&gt; 'http://www.gnu.org/licenses/agpl-3.0.html',
    'website' =&gt; 'http://www.sciactive.com',
    'services' =&gt; array('configurator'),
    'short_description' =&gt; 'Manages system configuration',
    'description' =&gt; 'Allows you to edit your system\'s configuration and the configuration of any installed components.',
    'depend' =&gt; array(
        'pines' =&gt; '&lt;2',
        'component' =&gt; 'com_jquery&amp;com_ptags&amp;com_pgrid&amp;com_pform'
    ),
    'recommend' =&gt; array(
        'service' =&gt; 'entity_manager&amp;user_manager'
    ),
    'abilities' =&gt; array(
        array('edit', 'Edit Configuration', 'Let the user change (and see) configuration settings.'),
        array('editperuser', 'Edit Per User Configuration', 'Let the user change (and see) per user/group configuration settings.'),
        array('view', 'View Configuration', 'Let the user see current configuration settings.'),
        array('viewperuser', 'View Per User Configuration', 'Let the user see current per user/group configuration settings.')
    ),
);</programlisting>
            </example><example>
              <title>Accessing Info for Pines and Components</title>

              <programlisting language="php">// Access Pines' "license" info entry:
echo $pines-&gt;info-&gt;license;

// Access a component's "description" info entry:
echo $pines-&gt;info-&gt;com_example-&gt;description;

// Access a template's "version" info entry:
echo $pines-&gt;info-&gt;tpl_green-&gt;version;</programlisting>
            </example></para>
        </section>

        <section>
          <title>Menu (<classname>menu</classname> class)</title>

          <para>The menu service builds and renders menus. In Pines, menus are
          built using arrays, and these arrays are usually stored in JSON
          files. Menu will begin by loading the <filename>menu.json</filename>
          file in the <filename>system</filename> directory. This will set up
          the main menu and its submenus. It will then load any
          <filename>menu.json</filename> files found in all components'
          directories. The JSON structure of a menu file is an array of
          objects (because JSON doesn't support associative arrays) which are
          each placed into the <varname>menu_arrays</varname> variable in the
          menu object. Each entry is either a top level menu, or a menu entry.
          Top level menus require a position in which to place them, as well
          as several other values:<table>
              <title>Top Level Menu Array Entries</title>

              <tgroup cols="3">
                <colspec colnum="3" colwidth="5*" />

                <thead>
                  <row>
                    <entry>Key</entry>

                    <entry>Required</entry>

                    <entry>Description</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry>path</entry>

                    <entry>Yes</entry>

                    <entry>The name of the menus path.</entry>
                  </row>

                  <row>
                    <entry>text</entry>

                    <entry>Yes</entry>

                    <entry>The text to title the menu's module.</entry>
                  </row>

                  <row>
                    <entry>position</entry>

                    <entry>Yes</entry>

                    <entry>The page position in which to place the
                    menu.</entry>
                  </row>

                  <row>
                    <entry>sort</entry>

                    <entry>No</entry>

                    <entry>Boolean value of whether the menu short be sorted
                    alphabetically.</entry>
                  </row>

                  <row>
                    <entry>depend</entry>

                    <entry>No</entry>

                    <entry>An associative array of dependencies required to
                    show the menu.</entry>
                  </row>
                </tbody>
              </tgroup>
            </table></para>

          <para>Regular menu entries have these values:<table>
              <title>Regular Menu Array Entries</title>

              <tgroup cols="3">
                <colspec colnum="3" colwidth="5*" />

                <thead>
                  <row>
                    <entry>Key</entry>

                    <entry>Required</entry>

                    <entry>Description</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry>path</entry>

                    <entry>Yes</entry>

                    <entry>The path of this menu entry. Paths are hierarchical
                    like file paths, using forward slashes as
                    separators.</entry>
                  </row>

                  <row>
                    <entry>text</entry>

                    <entry>Yes</entry>

                    <entry>The text to show in the menu entry.</entry>
                  </row>

                  <row>
                    <entry>sort</entry>

                    <entry>No</entry>

                    <entry>Boolean value of whether the menu short be sorted
                    alphabetically.</entry>
                  </row>

                  <row>
                    <entry>href</entry>

                    <entry>No</entry>

                    <entry>A URL, or an array of arguments to pass to
                    <function>pines_url()</function>, which the entry will
                    link to.</entry>
                  </row>

                  <row>
                    <entry>target</entry>

                    <entry>No</entry>

                    <entry>The HTML target of the link. Defaults to
                    "_self".</entry>
                  </row>

                  <row>
                    <entry>onclick</entry>

                    <entry>No</entry>

                    <entry>JavaScript which will run when the entry is
                    clicked.</entry>
                  </row>

                  <row>
                    <entry>depend</entry>

                    <entry>No</entry>

                    <entry>An associative array of dependencies required to
                    show the entry.</entry>
                  </row>
                </tbody>
              </tgroup>
            </table></para>

          <para>An extra dependency called "children" can be used on menu
          entries in order to show the menu only if it has visible
          children.</para>

          <para>To add a menu entry using code, you can insert it into the
          <varname>menu_arrays</varname> variable.<example>
              <title>Adding a Menu Entry Through Code</title>

              <programlisting language="php">// Using pines_url().
$pines-&gt;menu-&gt;menu_arrays[] = array(
    'path' =&gt; 'main_menu/example',
    'text' =&gt; 'Example',
    'href' =&gt; array('com_example', 'something', array('id' =&gt; $some_id)) // These are used as arguments for pines_url().
);

// Using a URL. This is placed under the above entry. It only appears when the user is logged in. It opens in a new window.
$pines-&gt;menu-&gt;menu_arrays[] = array(
    'path' =&gt; 'main_menu/example/google',
    'text' =&gt; 'Google',
    'href' =&gt; 'http://google.com',
    'target' =&gt; '_blank',
    'depend' =&gt; array(
        'ability' =&gt; ''
    )
);</programlisting>
            </example></para>

          <para>The system init script i80menus.php is responsible for loading
          the JSON files, by calling <methodname>add_json_file()</methodname>
          for the system menu file, then each component's menu file. This
          means that menu entries are not loaded until after all init/kill
          scripts and requested actions have run. This means that if you need
          to alter a component's menu entries (as opposed to just adding
          submenus and entries), you must hook Menu's
          <methodname>add_json_file()</methodname> or
          <methodname>render()</methodname> method.</para>

          <para>Once all menu entries have been loaded,
          <methodname>render()</methodname> will remove entries when their
          dependencies are not met. It will convert the entries into
          multi-dimensional arrays for each menu using their path values. It
          then passes these arrays to the <methodname>menu()</methodname>
          method of the current template and places the return value into a
          module in the menu's requested position.<example>
              <title>Example menu.json File</title>

              <programlisting>[
    {
        "path": "main_menu/other/example",
        "text": "Example",
        "depend": {
            "children": true
        }
    },
        {
            "path": "main_menu/other/example/widgets",
            "text": "Widgets",
            "href": ["com_example","widget/list"],
            "depend": {
                "ability": "com_example/listwidgets"
            }
        },
        {
            "path": "main_menu/other/example/newwidget",
            "text": "New Widget",
            "href": ["com_example","widget/edit"],
            "depend": {
                "ability": "com_example/newwidget"
            }
        }
]</programlisting>
            </example></para>
        </section>

        <section>
          <title>Page (<classname>page</classname> class)</title>

          <para>The page service manages modules, notices, and errors, and
          renders content to be output to the client by the template. Modules,
          which are objects that use views to generate content, are attached
          to Page in specific positions. A template's info object will have a
          list of positions the template supports. Page uses PHP's output
          buffering system to retrieve the output from modules and templates.
          Page also controls the title of the page.</para>

          <para>Page has several methods for manipulating the page
          title.<itemizedlist>
              <listitem>
                <para><methodname>title</methodname></para>

                <para>Append test to the title.</para>
              </listitem>

              <listitem>
                <para><methodname>title_set</methodname></para>

                <para>Replace the title.</para>
              </listitem>

              <listitem>
                <para><methodname>title_pre</methodname></para>

                <para>Prepend text to the title.</para>
              </listitem>

              <listitem>
                <para><methodname>get_title</methodname></para>

                <para>Retrieve the title.</para>
              </listitem>
            </itemizedlist></para>

          <para>Page has several methods for displaying notices and errors to
          the user. It is ultimately the responsibility of the template to
          display the messages to the user.<itemizedlist>
              <listitem>
                <para><methodname>notice</methodname></para>

                <para>Add a notice to be displayed to the user.</para>
              </listitem>

              <listitem>
                <para><methodname>get_notice</methodname></para>

                <para>Get the array of notices.</para>
              </listitem>

              <listitem>
                <para><methodname>error</methodname></para>

                <para>Add an error to be displayed to the user.</para>
              </listitem>

              <listitem>
                <para><methodname>get_error</methodname></para>

                <para>Get the array of errors.</para>
              </listitem>
            </itemizedlist></para>

          <para>Though module attachments are usually handled by the module
          when it is created, you can manually attach a module to Page. The
          second argument of <methodname>attach_module()</methodname> is the
          position in which to place the module. You can also manually detach
          the module. If the module is attached to the same position twice, it
          must likewise be removed twice.<example>
              <title>Manually Attaching and Detaching a Module</title>

              <programlisting language="php">$module = new module;

// Attach the module.
$pines-&gt;page-&gt;attach_module($module, 'content');

// Detach the module.
$pines-&gt;page-&gt;detach_module($module, 'content');</programlisting>
            </example></para>

          <para>The template will need to place the module content in the
          appropriate place on the page. To do this, templates use
          <methodname>render_modules()</methodname>, providing a position. If
          needed, the template can also provide a model, which will be used to
          format the content as necessary.<example>
              <title>Rendering the Modules in a Position Using a Model</title>

              <programlisting language="php">&lt;div id="modules_left"&gt;
    &lt;?php echo $pines-&gt;page-&gt;render_modules('left', 'module_sidebar'); ?&gt;
&lt;/div&gt;</programlisting>
            </example></para>

          <para>Under special circumstances, you may need to only output
          certain data to the client. For example, when you are returning JSON
          data to an AJAX request. To do this, set the
          <varname>override</varname> variable to true, then pass the content
          to <methodname>override_doc()</methodname>.<example>
              <title>Overriding the Page</title>

              <programlisting language="php">// Turn override on.
$pines-&gt;page-&gt;override = true;

// Output JSON data.
$pines-&gt;page-&gt;override_doc(json_encode($var));

// If you need to retrieve the data:
$data = $pines-&gt;page-&gt;get_override_doc();</programlisting>
            </example></para>

          <para>The page is rendered when the system init script
          <filename>i90render.php</filename> calls
          <methodname>render()</methodname>. If the page is overridden, the
          override document is returned. Otherwise, each module is rendered
          individually, then the template's <filename>template.php</filename>
          file is run. Because each module is rendered before the page, a
          module can cause another module to be attached to the page. However,
          that module will ultimately be rendered during the page's rendering.
          Therefore, if that module then causes another module to be attached
          in a position that has already been rendered, the third module will
          not be output to the user.</para>

          <note>
            <para>In order to allow it to be hooked,
            <methodname>render()</methodname> only returns the page output.
            The init script then echoes it to the user.</para>
          </note>
        </section>
      </section>

      <section>
        <title>Core Functions</title>

        <para>Pines Core includes several functions. Most of these functions
        are just shortcuts to common methods of the Pines object and system
        services.<table>
            <title>Core Functions</title>

            <tgroup cols="2">
              <colspec colnum="2" colwidth="3*" />

              <thead>
                <row>
                  <entry>Function</entry>

                  <entry>Description</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry><function>action</function></entry>

                  <entry>Shortcut to <code>$pines-&gt;action()</code>.</entry>
                </row>

                <row>
                  <entry><function>clean_checkbox</function></entry>

                  <entry>Clean the name of a checkbox to use in an HTML
                  form.</entry>
                </row>

                <row>
                  <entry><function>clean_filename</function></entry>

                  <entry>Clean a filename, so it doesn't refer to any parent
                  directories.</entry>
                </row>

                <row>
                  <entry><function>format_content</function></entry>

                  <entry>Shortcut to
                  <code>$pines-&gt;format_content()</code>.</entry>
                </row>

                <row>
                  <entry><function>format_date</function></entry>

                  <entry>Shortcut to
                  <code>$pines-&gt;format_date()</code>.</entry>
                </row>

                <row>
                  <entry><function>format_phone</function></entry>

                  <entry>Shortcut to
                  <code>$pines-&gt;format_phone()</code>.</entry>
                </row>

                <row>
                  <entry><function>gatekeeper</function></entry>

                  <entry>Shortcut to
                  <code>$pines-&gt;user_manager-&gt;gatekeeper()</code>. If no
                  user manager is installed, <function>gatekeeper</function>
                  returns true.</entry>
                </row>

                <row>
                  <entry><function>is_clean_filename</function></entry>

                  <entry>Check whether a filename refers to any parent
                  directories.</entry>
                </row>

                <row>
                  <entry><function>pines_depend</function></entry>

                  <entry>Shortcut to
                  <code>$pines-&gt;depend-&gt;check()</code>.</entry>
                </row>

                <row>
                  <entry><function>pines_error</function></entry>

                  <entry>Shortcut to
                  <code>$pines-&gt;page-&gt;error()</code>.</entry>
                </row>

                <row>
                  <entry><function>pines_log</function></entry>

                  <entry>Shortcut to
                  <code>$pines-&gt;log_manager-&gt;log()</code>. If no log
                  manager is installed, <function>pines_log</function> returns
                  true.</entry>
                </row>

                <row>
                  <entry><function>pines_notice</function></entry>

                  <entry>Shortcut to
                  <code>$pines-&gt;page-&gt;notice()</code>.</entry>
                </row>

                <row>
                  <entry><function>pines_url</function></entry>

                  <entry>Shortcut to
                  <code>$pines-&gt;template-&gt;url()</code>. If there is no
                  current template, <function>pines_url</function> returns
                  null.</entry>
                </row>

                <row>
                  <entry><function>punt_user</function></entry>

                  <entry>Shortcut to
                  <code>$pines-&gt;user_manager-&gt;punt_user()</code>. If no
                  user manager is installed <function>punt_user</function>
                  redirects the user to the homepage.</entry>
                </row>

                <row>
                  <entry><function>redirect</function></entry>

                  <entry>Shortcut to
                  <code>$pines-&gt;redirect()</code>.</entry>
                </row>
              </tbody>
            </tgroup>
          </table></para>
      </section>

      <section>
        <title>Core Classes</title>

        <section>
          <title>Pines Base Class</title>

          <para>The <classname>p_base</classname> class is a class which all
          classes in Pines extend. When implementing a special class, like
          <classname>entity</classname> or
          <classname>configurator_component</classname>, it must extend
          <classname>p_base</classname>. It may extend another class, like
          <classname>template</classname>, which already extends
          <classname>p_base</classname>.</para>
        </section>

        <section>
          <title>Component</title>

          <para>The <classname>component</classname> class is a class which
          all components' main classes extend.</para>
        </section>

        <section>
          <title>Template</title>

          <para>The <classname>template</classname> class is a class which all
          templates' main classes extend. This class itself is fairly empty,
          consisting mostly of basic methods and variables just to satisfy the
          interface's requirements. It does, however, include the standard
          implementation of the <methodname>url</methodname> method. This is
          what is called when using the shortcut function
          <function>pines_url</function> (unless the current template
          implements it).</para>

          <para>The <methodname>url</methodname> method accepts up to four
          arguments, in this order:<orderedlist>
              <listitem>
                <para><varname>$component</varname></para>

                <para>The name of the component that the URL should
                request.</para>
              </listitem>

              <listitem>
                <para><varname>$action</varname></para>

                <para>The name of the action that the URL should
                request.</para>
              </listitem>

              <listitem>
                <para><varname>$params</varname></para>

                <para>An associative array of parameters to place in the URL's
                query string.</para>
              </listitem>

              <listitem>
                <para><varname>$full_location</varname></para>

                <para>Whether to use the full location, instead of the
                relative location. For links in email, RSS feeds, and similar
                contexts, a full location should be used.</para>
              </listitem>
            </orderedlist></para>

          <para>If <methodname>url</methodname> is called with no arguments,
          it will return the relative URL of the index page.</para>
        </section>

        <section>
          <title>Module</title>

          <para>The <classname>module</classname> class is used to generate
          content using a view and place it into a page. Modules allow Pines
          to pass data from the logic portion of a component to the
          presentation portion. This allows the business logic to remain the
          same no matter which type of page is being constructed (XHTML, RSS,
          etc.). Modules select the proper view based on the format provided
          by the current template.</para>

          <para>Modules have several variables. However, the position and
          order variables must be set by using the
          <methodname>attach</methodname> method or the
          constructor.<itemizedlist>
              <listitem>
                <para><varname>muid</varname></para>

                <para>A unique ID available to views to allow the use of IDs
                in HTML. Generated with <function>mt_rand</function>.</para>
              </listitem>

              <listitem>
                <para><varname>title</varname></para>

                <para>The module's title. This is usually set by the
                view.</para>
              </listitem>

              <listitem>
                <para><varname>note</varname></para>

                <para>The module's note. This is usually set by the
                view.</para>
              </listitem>

              <listitem>
                <para><varname>classes</varname></para>

                <para>A list of additional classes to be added to the module.
                This applies only to HTML modules.</para>
              </listitem>

              <listitem>
                <para><varname>content</varname></para>

                <para>The modules content. This is almost always, but not
                necessarily, filled by the output of a view.</para>
              </listitem>

              <listitem>
                <para><varname>component</varname></para>

                <para>The component which contains the view.</para>
              </listitem>

              <listitem>
                <para><varname>view</varname></para>

                <para>The view from which the content will be
                retrieved.</para>
              </listitem>

              <listitem>
                <para><varname>position</varname></para>

                <para>The position on the page in which the module is
                placed.</para>
              </listitem>

              <listitem>
                <para><varname>order</varname></para>

                <para>The order in which the module is placed in the
                position.</para>
              </listitem>

              <listitem>
                <para><varname>show_title</varname></para>

                <para>Whether or not the title and note of the module should
                be displayed.</para>
              </listitem>
            </itemizedlist></para>

          <para>When creating a module, the component, view, position, and
          order can be specified in the constructor. Position and order are
          optional. The order is not guaranteed and will be ignored if it is
          already taken.<example>
              <title>Creating a Module</title>

              <programlisting language="php">// Add the widget form from com_example to the content part of the page.
// Place in order as #2, so #0, and #1 come before it.
$module = new module('com_example', 'widget/form', 'content', 2);</programlisting>
            </example></para>

          <para>You can also manually attach a module once it is
          created.<example>
              <title>Manually Attach an Existing Module</title>

              <programlisting language="php">$module = new module('com_example', 'widget/form');
if (isset($position))
    $module-&gt;attach($position);
else
    $module-&gt;attach('content');</programlisting>
            </example></para>

          <para>You can use the module to generate content without putting it
          into the page.<example>
              <title>Using a Module to Render Content</title>

              <programlisting language="php">$module = new module('com_example', 'widget/email');
$email_body = $module-&gt;render();</programlisting>
            </example><caution>
              <para>Even though the module is not added to the page in this
              example, it still uses the template's format to find the
              view.</para>
            </caution></para>

          <para>Pines provides a blank view, which you can use if you want to
          add content to the module manually.<example>
              <title>Manually Creating the Module Content</title>

              <programlisting language="php">// Of course, this example message would be much more suited to use pines_notice() or pines_error(),
// but this is merely an example of what you could do.
$module = new module('system', 'null', 'content');
$module-&gt;title = 'Result';
$module-&gt;content('The process '.($success ? 'finished successfully.' : 'encountered an error.'));

// And we can retrieve the content to log it.
pines_log($module-&gt;get_content());</programlisting>
            </example></para>

          <para>For more information about creating and using views, please
          see the section <link linkend="views">Views</link> section.</para>
        </section>
      </section>

      <section>
        <title>Order of Execution</title>

        <para>Pines is a very complex framework, and has many different
        interacting parts. Understanding how these parts are loaded and when
        they become available to use is important in developing successful
        Pines software. If you are reading this book sequentially, you may be
        unfamiliar with some of the terms used in this section. Since this
        section is so important for Pines development, I recommend you come
        back to this section after reading Part II, and read it again to
        reinforce your understanding of the order in which Pines executes
        various parts of the system.</para>

        <para>Pines begins execution by a request to the
        <filename>index.php</filename> file.<itemizedlist>
            <listitem>
              <para>Defines constants.<itemizedlist>
                  <listitem>
                    <para><constant>P_EXEC_TIME</constant> - The microtime
                    when the script began executing.</para>
                  </listitem>

                  <listitem>
                    <para><constant>P_RUN</constant> - Used to determine that
                    Pines was executed properly through
                    <filename>index.php</filename>.</para>
                  </listitem>

                  <listitem>
                    <para><constant>P_BASE_PATH</constant> - The base path of
                    the Pines installation.</para>
                  </listitem>

                  <listitem>
                    <para><constant>P_INDEX</constant> - The name of the index
                    file. (Almost always
                    <filename>index.php</filename>.)</para>
                  </listitem>

                  <listitem>
                    <para><constant>P_SCRIPT_TIMING</constant> - Whether to
                    use the script timing system. Change this value to help
                    check for bottlenecks in your code.</para>
                  </listitem>
                </itemizedlist></para>
            </listitem>

            <listitem>
              <para>Scans the <filename>system/init/</filename> directory for
              the system init scripts, and executes them in order.<orderedlist>
                  <listitem>
                    <para><filename>i00timing.php</filename></para>

                    <itemizedlist>
                      <listitem>
                        <para>Loads script timing functions. These functions
                        will use the JavaScript console.log function to
                        display timing information for various portions of the
                        script run.</para>
                      </listitem>
                    </itemizedlist>
                  </listitem>

                  <listitem>
                    <para><filename>i10functions.php</filename></para>

                    <itemizedlist>
                      <listitem>
                        <para>Loads various functions used specifically by
                        Pines Core.</para>
                      </listitem>
                    </itemizedlist>
                  </listitem>

                  <listitem>
                    <para><filename>i20interfaces.php</filename><itemizedlist>
                        <listitem>
                          <para>Defines interfaces for system services and
                          classes.</para>
                        </listitem>
                      </itemizedlist></para>
                  </listitem>

                  <listitem>
                    <para><filename>i30load_system.php</filename><itemizedlist>
                        <listitem>
                          <para>Strips slashes from request variables. This
                          ensures that request data always appears as if Magic
                          Quotes are turned off.</para>
                        </listitem>

                        <listitem>
                          <para>Loads system classes from
                          <filename>system/classes/</filename>.</para>
                        </listitem>

                        <listitem>
                          <para>Loads <varname>$pines</varname>.<itemizedlist>
                              <listitem>
                                <para>Loads config service.<itemizedlist>
                                    <listitem>
                                      <para>Loads system configuration.</para>
                                    </listitem>

                                    <listitem>
                                      <para>Determines full and relative location using
                                      client provided hostname, if they are not already
                                      set by the config.</para>
                                    </listitem>

                                    <listitem>
                                      <para>Sets
                                      <varname>$pines-&gt;config-&gt;location</varname> to
                                      static location, or relative location if static is
                                      not set.</para>
                                    </listitem>
                                  </itemizedlist></para>
                              </listitem>

                              <listitem>
                                <para>Loads info service.<itemizedlist>
                                    <listitem>
                                      <para>Loads system info.</para>
                                    </listitem>
                                  </itemizedlist></para>
                              </listitem>

                              <listitem>
                                <para>Loads hook service.</para>
                              </listitem>

                              <listitem>
                                <para>Loads depend service.<itemizedlist>
                                    <listitem>
                                      <para>Loads default dependency checkers.</para>
                                    </listitem>
                                  </itemizedlist></para>
                              </listitem>

                              <listitem>
                                <para>Loads menu service.</para>
                              </listitem>

                              <listitem>
                                <para>Loads page service.</para>
                              </listitem>

                              <listitem>
                                <para>Checks system config.<itemizedlist>
                                    <listitem>
                                      <para>Determines current template from config
                                      setting or request variable and sets it as the
                                      template service.</para>
                                    </listitem>

                                    <listitem>
                                      <para>Gets timezone from config and passes to
                                      <varname>date_default_timezone_set</varname>.</para>
                                    </listitem>

                                    <listitem>
                                      <para>If offline mode is turned on, loads
                                      <filename>system/offline.php</filename>, which ends
                                      execution here.</para>
                                    </listitem>

                                    <listitem>
                                      <para>If the current template's class file is
                                      missing, loads
                                      <filename>system/template_error.php</filename>,
                                      which ends execution here.</para>
                                    </listitem>

                                    <listitem>
                                      <para>Adds current template's class file to the list
                                      of class files.</para>
                                    </listitem>
                                  </itemizedlist></para>
                              </listitem>

                              <listitem>
                                <para>Fills the lists of components and
                                templates.</para>
                              </listitem>

                              <listitem>
                                <para>Finds components' class files and adds them to
                                the list of class files.</para>
                              </listitem>

                              <listitem>
                                <para>Determines requested component and action,
                                using URL rewriting if it is enabled.</para>
                              </listitem>
                            </itemizedlist></para>
                        </listitem>
                      </itemizedlist></para>
                  </listitem>

                  <listitem>
                    <para><filename>i40init_system.php</filename><itemizedlist>
                        <listitem>
                          <para>Loads the class autoloader function. This
                          function allows all component classes to be auto
                          loaded the first time they are used.</para>
                        </listitem>

                        <listitem>
                          <para>Hooks the <varname>$pines</varname>
                          object.</para>
                        </listitem>

                        <listitem>
                          <para>Starts a session.</para>
                        </listitem>

                        <listitem>
                          <para>Displays any pending notices and errors found
                          in the session and removes them from the session.
                          This is part of the redirection system.</para>
                        </listitem>
                      </itemizedlist></para>
                  </listitem>

                  <listitem>
                    <para><filename>i50init_components.php</filename><itemizedlist>
                        <listitem>
                          <para>Scans all components' init directories for
                          init scripts.</para>
                        </listitem>

                        <listitem>
                          <para>Adds the
                          <filename>system/i01common.php</filename> file to
                          the list.</para>
                        </listitem>

                        <listitem>
                          <para>Sorts them by filename.</para>
                        </listitem>

                        <listitem>
                          <para>Executes each init script in order. Some
                          important events are noted below.<itemizedlist>
                              <listitem>
                                <para>i00_ : Common cleaning functions can be
                                overridden here. However, shortcut functions (like
                                <function>gatekeeper</function>) are not available
                                yet.</para>
                              </listitem>

                              <listitem>
                                <para>i01_ : Common functions are being defined
                                here.</para>
                              </listitem>

                              <listitem>
                                <para>i10_ : Components which provide system
                                services should set themselves as the system service
                                here.</para>
                              </listitem>

                              <listitem>
                                <para>i11_ : The user manager should fill the
                                session with user data here.</para>
                              </listitem>

                              <listitem>
                                <para>i12_ and i13_ : Any component which may log
                                the user out (such as a timer) should do it
                                here.</para>
                              </listitem>

                              <listitem>
                                <para>i14_ : Conditional and per user/group config
                                should be loaded here.</para>
                              </listitem>

                              <listitem>
                                <para>i15_ : Any component which may change the
                                requested component/action should do it here.</para>
                              </listitem>
                            </itemizedlist></para>
                        </listitem>

                        <listitem>
                          <para>Checks system config again in case config has
                          changed. (Repeats same steps as
                          <varname>$pines</varname> does when loading.)</para>
                        </listitem>
                      </itemizedlist></para>
                  </listitem>

                  <listitem>
                    <para><filename>i60action.php</filename><itemizedlist>
                        <listitem>
                          <para>Runs <function>action</function>, using the
                          requested component and action.</para>
                        </listitem>

                        <listitem>
                          <para>If the string "error_404" is returned, issues
                          a 404 HTTP status header and loads a module with
                          "system" as component, "error_404" as view, and
                          "content" as position.</para>
                        </listitem>
                      </itemizedlist></para>
                  </listitem>

                  <listitem>
                    <para><filename>i70kill_components.php</filename><itemizedlist>
                        <listitem>
                          <para>Scans all components' init directories for
                          kill scripts.</para>
                        </listitem>

                        <listitem>
                          <para>Sorts them by filename.</para>
                        </listitem>

                        <listitem>
                          <para>Executes each kill script in order.</para>
                        </listitem>
                      </itemizedlist></para>
                  </listitem>

                  <listitem>
                    <para><filename>i80menus.php</filename><itemizedlist>
                        <listitem>
                          <para>Loads the menu file
                          <filename>system/menu.json</filename>.</para>
                        </listitem>

                        <listitem>
                          <para>Loads each component's
                          <filename>menu.json</filename> file
                          consecutively.</para>
                        </listitem>

                        <listitem>
                          <para>Renders and attaches the menu.<itemizedlist>
                              <listitem>
                                <para>Calculates each menu entry's dependencies and
                                builds a multidimensional array of menu items whose
                                dependencies are met.</para>
                              </listitem>

                              <listitem>
                                <para>Cleans each menu, removing any entry whose
                                "children" dependency isn't met. Also removes some
                                unnecessary data.</para>
                              </listitem>

                              <listitem>
                                <para>Creates and attaches a module for each menu,
                                the content of which is filled with the response of
                                the <methodname>menu</methodname> method of the
                                current template.</para>
                              </listitem>
                            </itemizedlist></para>
                        </listitem>
                      </itemizedlist></para>
                  </listitem>

                  <listitem>
                    <para><filename>i90render.php</filename><itemizedlist>
                        <listitem>
                          <para>Calls the <methodname>render</methodname>
                          method of the page.<itemizedlist>
                              <listitem>
                                <para>Returns the override document if override is
                                set to true. (Does not do the steps immediately
                                below.)</para>
                              </listitem>

                              <listitem>
                                <para>Iterates through each position, calling
                                <methodname>render</methodname> on all the modules
                                in that position.</para>
                              </listitem>

                              <listitem>
                                <para>Runs the <filename>template.php</filename>
                                file of the current template.</para>
                              </listitem>
                            </itemizedlist></para>
                        </listitem>

                        <listitem>
                          <para>Prints the response.</para>
                        </listitem>
                      </itemizedlist></para>
                  </listitem>
                </orderedlist></para>
            </listitem>
          </itemizedlist></para>

        <para>As mentioned before, this section is very important for Pines
        development. Knowing when certain features will be available for use
        allows you to plan accordingly. Pines is very flexible, but it is also
        very strictly structured. If you know Pines' execution path, debugging
        will be much easier. Remember to come back to this section if you are
        currently unfamiliar with the features discussed here.</para>
      </section>
    </chapter>

    <chapter>
      <title>System Services</title>

      <para>System services provide many features, and allow these features to
      be implemented in many different ways. System services are not provided
      by Pines Core. They are, however, well defined and must conform to
      certain guidelines to ensure that any component designed to use them
      will work with any implementation.</para>

      <section>
        <title>System Services</title>

        <section>
          <title>Configurator</title>

          <para>The configurator service allows the user and other components
          to edit/save configuration and enable/disable components. In Pines,
          a component is disabled by prepending a period (.) to its
          directory's name.</para>

          <para>The configurator itself has the following
          methods:<itemizedlist>
              <listitem>
                <para><methodname>disable_component</methodname></para>

                <para>Disables a component. This is accomplished by prepending
                a dot to its directory's name. Accepts the name of the
                component as the only argument.</para>
              </listitem>

              <listitem>
                <para><methodname>enable_component</methodname></para>

                <para>Enables a component. This is accomplished by removing
                the dot from the beginning of its directory's name. Accepts
                the name of the component as the only argument.</para>
              </listitem>

              <listitem>
                <para><methodname>list_components</methodname></para>

                <para>Creates and attaches a module which lists configurable
                components. It also returns the created module.</para>
              </listitem>
            </itemizedlist><example>
              <title>Enabling and Disabling Components</title>

              <programlisting language="php">// Enable the component com_good.
$pines-&gt;configurator-&gt;enable_component('com_good');

// Disable the component com_bad.
$pines-&gt;configurator-&gt;disable_component('com_bad');</programlisting>
            </example></para>

          <section>
            <title>Configurator Component</title>

            <para>The configurator also provides a class for retrieving and
            manipulating a component's configuration. This class is the
            <classname>configurator_component</classname> class. It provides
            the static method <methodname>factory</methodname>, which accepts
            the component's name as the only argument and returns a new
            instance of <classname>configurator_component</classname> for the
            provided component. The class constructor also accepts this
            argument.</para>

            <para>The component configurator class provides these
            methods:<itemizedlist>
                <listitem>
                  <para><methodname>get_full_config_array</methodname></para>

                  <para>Get a full config array. (With defaults
                  replaced.)</para>
                </listitem>

                <listitem>
                  <para><methodname>is_configurable</methodname></para>

                  <para>Check if a component is configurable.</para>
                </listitem>

                <listitem>
                  <para><methodname>is_disabled</methodname></para>

                  <para>Check if a component is disabled.</para>
                </listitem>

                <listitem>
                  <para><methodname>print_form</methodname></para>

                  <para>Print a form to edit the configuration.</para>
                </listitem>

                <listitem>
                  <para><methodname>print_view</methodname></para>

                  <para>Print a view of the configuration.</para>
                </listitem>

                <listitem>
                  <para><methodname>save_config</methodname></para>

                  <para>Write the configuration to the config file.</para>
                </listitem>

                <listitem>
                  <para><methodname>set_config</methodname></para>

                  <para>Set the current config by providing an array of key
                  =&gt; values. Any value not provided will be set back to
                  default.</para>
                </listitem>
              </itemizedlist><example>
                <title>Changing a Component's Configuration</title>

                <programlisting language="php">// Load the component's configuration.
$conf = configurator_component::factory('com_example');
// Set the new configuration.
$conf-&gt;set_config(array(
    'host' =&gt; $host,
    'user' =&gt; $user,
    'password' =&gt; $password,
    'database' =&gt; $database
));
// Save the new configuration to disk.
$conf-&gt;save_config();</programlisting>
              </example></para>

            <para>When the configuration is saved, the configurator creates a
            <filename>config.php</filename> file in the component's directory
            (if it does not already exist), and saves a script to the file,
            which returns the configuration values as an array of associative
            arrays. Each associative array contains an entry called "name" and
            an entry called "value". The config service uses this file when
            building the component's configuration, replacing values from
            <filename>defaults.php</filename> with the values from this
            file.<example>
                <title>Typical config.php File</title>

                <programlisting language="php">&lt;?php
defined('P_RUN') or die('Direct access prohibited');
return array (
  0 =&gt; 
  array (
    'name' =&gt; 'string',
    'value' =&gt; 'dsgsdfgfg',
  ),
  1 =&gt;
  array (
    'name' =&gt; 'multi_float',
    'value' =&gt; 
    array (
      0 =&gt; 9.33,
      1 =&gt; 8.4,
    ),
  ),
);
?&gt;</programlisting>
              </example></para>
          </section>
        </section>

        <section>
          <title>Editor</title>

          <para>The editor service provides a more friendly HTML editor for
          the user. When editing some sort of content, which is to be
          displayed in a page or email, a textarea is usually not the best
          solution. The editor service provides a method which allows the
          system administrator to choose between multiple HTML editors to
          provide for the system's users.</para>

          <para>Once the editor is loaded, it will transform any textareas
          with the class "peditor" or "peditor-simple" into HTML editors. If
          it provides a simplified editor, textareas with the class
          "peditor-simple" will use this editor instead.</para>

          <para>The editor has one method, <methodname>load</methodname>,
          which loads the editor. This method should be called from a view, to
          ensure it is only called when outputting HTML.<example>
              <title>Using the Editor Service in a View</title>

              <programlisting language="php">&lt;?php
/**
 * Prints editors.
 *
 * @license http://www.gnu.org/licenses/agpl-3.0.html
 * @author Hunter Perrin &lt;hunter@sciactive.com&gt;
 * @copyright SciActive.com
 * @link http://sciactive.com/
 */
defined('P_RUN') or die('Direct access prohibited');
$this-&gt;title = 'Editors';
// Load the editor.
$pines-&gt;editor-&gt;load();
?&gt;
&lt;div&gt;Regular Editor&lt;/div&gt;
&lt;div&gt;&lt;textarea rows="3" cols="35" class="peditor"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;div&gt;Simple Editor&lt;/div&gt;
&lt;div&gt;&lt;textarea rows="3" cols="35" class="peditor-simple"&gt;&lt;/textarea&gt;&lt;/div&gt;</programlisting>
            </example></para>
        </section>

        <section>
          <title>Entity Manager</title>

          <para>The entity manager service provides database abstraction for
          Pines. Data in Pines is based on objects called entities. An entity
          is an object which can hold any type of data available in PHP,
          including other entities. All entity classes (and therefore all
          entities) inherit the <classname>entity</classname> class.</para>

          <para>Components can freely access the database if they wish,
          however it is strongly discouraged, as this prevents portability and
          extensibility. Using entities to store data has several benefits for
          both developers and site operators.<itemizedlist>
              <listitem>
                <para>Site operators can choose which database backend to use,
                based on their own needs.</para>
              </listitem>

              <listitem>
                <para>Moving from one database to another, backing up and
                restoring a database, and mirroring databases is much easier
                through an entity manager.</para>
              </listitem>

              <listitem>
                <para>Data storage is much easier.</para>
              </listitem>

              <listitem>
                <para>Data querying is much easier.</para>
              </listitem>

              <listitem>
                <para>A component can store data in another component's
                entities and extend its functionality.</para>
              </listitem>

              <listitem>
                <para>The user manager provides access control for all
                entities automatically.</para>
              </listitem>
            </itemizedlist></para>

          <para>Entities are not strictly structured, so data of any type can
          be added and saved just by assigning a variable on the entity and
          calling <function>save()</function>. This makes data manipulation in
          Pines very easy.</para>

          <para>All entities are given a globally unique identifier (GUID),
          which is an integer. No entities in the same Pines installation will
          ever have the same GUID. The entity manager also provides UIDs,
          which can be used to number certain types of entities (or
          practically anything else). UIDs can be used to provide a more
          visibly pleasing identifier for entities.</para>

          <para>Entities are organized with tags. For example, if a component,
          com_blog, wanted to store posts using an entity, it may add the tags
          "com_blog" and "post" to all new instances. This allows components
          to determine and select their entities from other components'
          entities.</para>

          <para>An entity's class is usually named by appending to their
          component's name. In the previous example, the class would probably
          be called <classname>com_blog_post</classname>. When selecting
          entities with the entity manager, the class used to retrieve them
          must be specified, or the <classname>entity</classname> class will
          be used. If an entity is referenced in another entity's variable,
          the class is saved along with the GUID. When this variable is
          accessed later, the entity manager will retrieve the referenced
          entity using the saved class.</para>

          <para>The entity manager has the following methods:<itemizedlist>
              <listitem>
                <para></para>
              </listitem>
            </itemizedlist></para>

          <section>
            <title>Entity</title>

            <para></para>
          </section>

          <section>
            <title>Entity Querying</title>

            <para></para>
          </section>
        </section>

        <section>
          <title>Icons</title>

          <para></para>
        </section>

        <section>
          <title>Log Manager</title>

          <para></para>
        </section>

        <section>
          <title>Template</title>

          <para></para>
        </section>

        <section>
          <title>Uploader</title>

          <para></para>
        </section>

        <section>
          <title>User Manager</title>

          <para></para>

          <section>
            <title>User</title>

            <para></para>
          </section>

          <section>
            <title>Group</title>

            <para></para>
          </section>
        </section>
      </section>

      <section>
        <title>Creating a Service</title>

        <para>Creating a system service for Pines can be a complex process,
        and certain rules must be followed to ensure it works with all
        components. All system services have an interface, which their main
        class must implement. Some services have additional classes which must
        be provided. These classes also have interfaces which must be
        implemented.</para>

        <para>Interfaces are defined in the
        <filename>system/init/i20interfaces.php</filename> file.</para>

        <para>In order to implement a service, one of the component's classes
        (usually its main class) must extend the
        <classname>component</classname> class and implement the appropriate
        interface for the service.</para>

        <para>A component which implements a service must inform Pines that it
        is providing the service. To do this, the component uses an init
        script with the number 10. In the init script, it sets the service's
        variable under <varname>$pines</varname> to a string containing the
        class name. For example, if a component, com_xmlentity, is providing
        the entity manager service, it would have something like the following
        in an init script such as <filename>i10set.php</filename>.<example>
            <title>Setting a Component as a System Service in an Init
            Script</title>

            <programlisting language="php">&lt;?php
/**
 * Set the system entity manager.
 *
 * @license http://www.gnu.org/licenses/agpl-3.0.html
 * @author Hunter Perrin &lt;hunter@sciactive.com&gt;
 * @copyright SciActive.com
 * @link http://sciactive.com/
 */
defined('P_RUN') or die('Direct access prohibited');

/**
 * The entity manager.
 * @global com_xmlentity $pines-&gt;entity_manager
 */
$pines-&gt;entity_manager = 'com_xmlentity';

?&gt;</programlisting>
          </example></para>

        <para>The first time this variable is accessed, Pines will recognize
        it as a system service and load a new instance of the class into the
        variable. A component can implement any number of services.</para>

        <para>The one exception to these practices is the template service.
        Templates do not have to use an init script, but can only provide the
        template service. They also must use their main class, which only
        needs to extend the <classname>template</classname> class. The
        <classname>template</classname> class already implements
        <interfacename>template_interface</interfacename>.</para>
      </section>
    </chapter>

    <chapter>
      <title>Pines JavaScript Object</title>

      <para></para>
    </chapter>
  </part>

  <part>
    <title>Application Development</title>

    <chapter>
      <title>Components</title>

      <section>
        <title>Component Design</title>

        <para></para>
      </section>

      <section xml:id="views">
        <title>Views</title>

        <para></para>
      </section>
    </chapter>

    <chapter>
      <title>Templates</title>

      <section>
        <title>Template Design</title>

        <para></para>
      </section>
    </chapter>
  </part>

  <part>
    <title>Distribution</title>

    <chapter>
      <title>Packaging</title>

      <para></para>
    </chapter>

    <chapter>
      <title>Pines Plaza</title>

      <para></para>
    </chapter>
  </part>
</book>
